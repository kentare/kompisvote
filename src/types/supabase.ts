/* eslint-disable @typescript-eslint/no-empty-interface */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/': {
		get: {
			responses: {
				/** OK */
				200: unknown;
			};
		};
	};
	'/answer': {
		get: {
			parameters: {
				query: {
					id?: parameters['rowFilter.answer.id'];
					created_at?: parameters['rowFilter.answer.created_at'];
					numeric?: parameters['rowFilter.answer.numeric'];
					freetext?: parameters['rowFilter.answer.freetext'];
					yn?: parameters['rowFilter.answer.yn'];
					possible_answer_id?: parameters['rowFilter.answer.possible_answer_id'];
					answered_by_user_id?: parameters['rowFilter.answer.answered_by_user_id'];
					question_id?: parameters['rowFilter.answer.question_id'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions['answer'][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** answer */
					answer?: definitions['answer'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					id?: parameters['rowFilter.answer.id'];
					created_at?: parameters['rowFilter.answer.created_at'];
					numeric?: parameters['rowFilter.answer.numeric'];
					freetext?: parameters['rowFilter.answer.freetext'];
					yn?: parameters['rowFilter.answer.yn'];
					possible_answer_id?: parameters['rowFilter.answer.possible_answer_id'];
					answered_by_user_id?: parameters['rowFilter.answer.answered_by_user_id'];
					question_id?: parameters['rowFilter.answer.question_id'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					id?: parameters['rowFilter.answer.id'];
					created_at?: parameters['rowFilter.answer.created_at'];
					numeric?: parameters['rowFilter.answer.numeric'];
					freetext?: parameters['rowFilter.answer.freetext'];
					yn?: parameters['rowFilter.answer.yn'];
					possible_answer_id?: parameters['rowFilter.answer.possible_answer_id'];
					answered_by_user_id?: parameters['rowFilter.answer.answered_by_user_id'];
					question_id?: parameters['rowFilter.answer.question_id'];
				};
				body: {
					/** answer */
					answer?: definitions['answer'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	'/type': {
		get: {
			parameters: {
				query: {
					id?: parameters['rowFilter.type.id'];
					created_at?: parameters['rowFilter.type.created_at'];
					name?: parameters['rowFilter.type.name'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions['type'][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** type */
					type?: definitions['type'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					id?: parameters['rowFilter.type.id'];
					created_at?: parameters['rowFilter.type.created_at'];
					name?: parameters['rowFilter.type.name'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					id?: parameters['rowFilter.type.id'];
					created_at?: parameters['rowFilter.type.created_at'];
					name?: parameters['rowFilter.type.name'];
				};
				body: {
					/** type */
					type?: definitions['type'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	'/possible_answers': {
		get: {
			parameters: {
				query: {
					id?: parameters['rowFilter.possible_answers.id'];
					created_at?: parameters['rowFilter.possible_answers.created_at'];
					text?: parameters['rowFilter.possible_answers.text'];
					question_id?: parameters['rowFilter.possible_answers.question_id'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions['possible_answers'][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** possible_answers */
					possible_answers?: definitions['possible_answers'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					id?: parameters['rowFilter.possible_answers.id'];
					created_at?: parameters['rowFilter.possible_answers.created_at'];
					text?: parameters['rowFilter.possible_answers.text'];
					question_id?: parameters['rowFilter.possible_answers.question_id'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					id?: parameters['rowFilter.possible_answers.id'];
					created_at?: parameters['rowFilter.possible_answers.created_at'];
					text?: parameters['rowFilter.possible_answers.text'];
					question_id?: parameters['rowFilter.possible_answers.question_id'];
				};
				body: {
					/** possible_answers */
					possible_answers?: definitions['possible_answers'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	'/question': {
		get: {
			parameters: {
				query: {
					id?: parameters['rowFilter.question.id'];
					created_at?: parameters['rowFilter.question.created_at'];
					text?: parameters['rowFilter.question.text'];
					type_id?: parameters['rowFilter.question.type_id'];
					created_by_id?: parameters['rowFilter.question.created_by_id'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions['question'][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** question */
					question?: definitions['question'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					id?: parameters['rowFilter.question.id'];
					created_at?: parameters['rowFilter.question.created_at'];
					text?: parameters['rowFilter.question.text'];
					type_id?: parameters['rowFilter.question.type_id'];
					created_by_id?: parameters['rowFilter.question.created_by_id'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					id?: parameters['rowFilter.question.id'];
					created_at?: parameters['rowFilter.question.created_at'];
					text?: parameters['rowFilter.question.text'];
					type_id?: parameters['rowFilter.question.type_id'];
					created_by_id?: parameters['rowFilter.question.created_by_id'];
				};
				body: {
					/** question */
					question?: definitions['question'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	'/user': {
		get: {
			parameters: {
				query: {
					id?: parameters['rowFilter.user.id'];
					created_at?: parameters['rowFilter.user.created_at'];
					name?: parameters['rowFilter.user.name'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: definitions['user'][];
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** user */
					user?: definitions['user'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					id?: parameters['rowFilter.user.id'];
					created_at?: parameters['rowFilter.user.created_at'];
					name?: parameters['rowFilter.user.name'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					id?: parameters['rowFilter.user.id'];
					created_at?: parameters['rowFilter.user.created_at'];
					name?: parameters['rowFilter.user.name'];
				};
				body: {
					/** user */
					user?: definitions['user'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
}

export interface definitions {
	answer: {
		/**
		 * Format: bigint
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 */
		id: number;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		created_at?: string;
		/** Format: bigint */
		numeric?: number;
		/** Format: text */
		freetext?: string;
		/** Format: boolean */
		yn?: boolean;
		/**
		 * Format: bigint
		 * @description Note:
		 * This is a Foreign Key to `possible_answers.id`.<fk table='possible_answers' column='id'/>
		 */
		possible_answer_id?: number;
		/**
		 * Format: bigint
		 * @description Note:
		 * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
		 */
		answered_by_user_id: number;
		/**
		 * Format: bigint
		 * @description Note:
		 * This is a Foreign Key to `question.id`.<fk table='question' column='id'/>
		 */
		question_id: number;
	};
	type: {
		/**
		 * Format: bigint
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 */
		id: number;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		created_at?: string;
		/** Format: character varying */
		name: string;
	};
	possible_answers: {
		/**
		 * Format: bigint
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 */
		id: number;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		created_at?: string;
		/** Format: text */
		text: string;
		/**
		 * Format: bigint
		 * @description Note:
		 * This is a Foreign Key to `question.id`.<fk table='question' column='id'/>
		 */
		question_id: number;
	};
	question: {
		/**
		 * Format: bigint
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 */
		id: number;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		created_at?: string;
		/**
		 * Format: text
		 * @default
		 */
		text: string;
		/**
		 * Format: bigint
		 * @description Note:
		 * This is a Foreign Key to `type.id`.<fk table='type' column='id'/>
		 */
		type_id: number;
		/**
		 * Format: bigint
		 * @description Note:
		 * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
		 */
		created_by_id: number;
	};
	user: {
		/**
		 * Format: bigint
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 */
		id: number;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		created_at?: string;
		/** Format: character varying */
		name: string;
	};
}

export interface parameters {
	/**
	 * @description Preference
	 * @enum {string}
	 */
	preferParams: 'params=single-object';
	/**
	 * @description Preference
	 * @enum {string}
	 */
	preferReturn: 'return=representation' | 'return=minimal' | 'return=none';
	/**
	 * @description Preference
	 * @enum {string}
	 */
	preferCount: 'count=none';
	/** @description Filtering Columns */
	select: string;
	/** @description On Conflict */
	on_conflict: string;
	/** @description Ordering */
	order: string;
	/** @description Limiting and Pagination */
	range: string;
	/**
	 * @description Limiting and Pagination
	 * @default items
	 */
	rangeUnit: string;
	/** @description Limiting and Pagination */
	offset: string;
	/** @description Limiting and Pagination */
	limit: string;
	/** @description answer */
	'body.answer': definitions['answer'];
	/** Format: bigint */
	'rowFilter.answer.id': string;
	/** Format: timestamp with time zone */
	'rowFilter.answer.created_at': string;
	/** Format: bigint */
	'rowFilter.answer.numeric': string;
	/** Format: text */
	'rowFilter.answer.freetext': string;
	/** Format: boolean */
	'rowFilter.answer.yn': string;
	/** Format: bigint */
	'rowFilter.answer.possible_answer_id': string;
	/** Format: bigint */
	'rowFilter.answer.answered_by_user_id': string;
	/** Format: bigint */
	'rowFilter.answer.question_id': string;
	/** @description type */
	'body.type': definitions['type'];
	/** Format: bigint */
	'rowFilter.type.id': string;
	/** Format: timestamp with time zone */
	'rowFilter.type.created_at': string;
	/** Format: character varying */
	'rowFilter.type.name': string;
	/** @description possible_answers */
	'body.possible_answers': definitions['possible_answers'];
	/** Format: bigint */
	'rowFilter.possible_answers.id': string;
	/** Format: timestamp with time zone */
	'rowFilter.possible_answers.created_at': string;
	/** Format: text */
	'rowFilter.possible_answers.text': string;
	/** Format: bigint */
	'rowFilter.possible_answers.question_id': string;
	/** @description question */
	'body.question': definitions['question'];
	/** Format: bigint */
	'rowFilter.question.id': string;
	/** Format: timestamp with time zone */
	'rowFilter.question.created_at': string;
	/** Format: text */
	'rowFilter.question.text': string;
	/** Format: bigint */
	'rowFilter.question.type_id': string;
	/** Format: bigint */
	'rowFilter.question.created_by_id': string;
	/** @description user */
	'body.user': definitions['user'];
	/** Format: bigint */
	'rowFilter.user.id': string;
	/** Format: timestamp with time zone */
	'rowFilter.user.created_at': string;
	/** Format: character varying */
	'rowFilter.user.name': string;
}

export interface operations {}

export interface external {}
